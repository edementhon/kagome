<library>
	<class name="devview">
	<!--  this attribute gets set to the currently selected object (node or edge). -->
	<attribute name="selectedobj" />
	<!--  this attribute sets the shape of the nodes that will be drawn.
		For now, it can be:
		1. circle
		2. box
		3. fancy box
	 -->
	<attribute name="nodeShapes" type="string" value="fancybox"/>
	<!-- this flag denotes the current mode
		the mode can be: ADD_CONNECTOR
		
	 -->
	 <attribute name="modeFlag" type="string"/>
	 
	<event name="onselectswitch" />
	<!-- Nodes fire this event in the view when they are clicked. 
	This will be used to create new connectors. To create a new conenctor, 
	a user clicks one node, and then clicks another one
	
	THIS IS JUST A FIRST STAB. WE MIGHT WANT TO DO SOMETHING ELSE TO DRAW EDGES.
	 -->
	<event name="onnodeclicked" />

	<event name="ondeselectedobj" />
	
	<event name="nodeAdded" />
	<event name="edgeAdded" />
	<event name="nodeDeleted" />
	<event name="edgeDeleted" />		

	
	<handler name="onselectswitch">
		if (this.selectedobj)
			this.selectedobj.unhighlight();
	</handler>
	<handler name="onselectedobj">
		this.selectedobj.highlight();
	</handler>	
	<handler name="onnodeclicked" args="clickednode">
		//are we in the correct mode?
		if (this.modeFlag == "ADD_CONNECTOR")
		{
			//if there was a previously clicked node
			if (this.pclickednode != null) {
					//make a connector
					var ncon = new connector(this, {from:this.pclickednode,to:clickednode});
					//remove mode
					this.setAttribute('modeFlag', '');
					this.edgeAdded.sendEvent(ncon.modeledge);
				}
			else {//make this the first clicked node
				this.pclickednode = clickednode;
			}
		}
		
	</handler>
	<handler name="onmodeFlag">
		Debug.write("current mode is", this.modeFlag);
		switch (modeFlag) {
			case "ADD_CONNECTOR":
				LzCursor.setCursorGlobal('concursor');
				break;
			default:
				LzCursor.restoreCursor();
				break;
		}
	</handler>
	<handler name="onclick">
		//when we click on the development view somewhere outside an object
		//unhighlight the currently selected object, if any
		if (this.selectedobj != null) {
			// Send deselect event to parent
			this.ondeselectedobj.sendEvent();
			this.selectedobj.unhighlight();
		}
		//also release the modeflag
		this.setAttribute('modeFlag', 'NONE');
	</handler>
	<method name="deleteSelected">
		var obj = this.selectedobj;
		var type = "";
		if (obj != null) {
			if (obj.from != null) {
				//the object deleted is an edge. 
				//infor model
				this.edgeDeleted.sendEvent(obj.modeledge);
			}
			else {
				/*
				 *	node. inform model
				 */
				 this.nodeDeleted.sendEvent(obj.modelnode);
			}
			//call clean on the object. For an example, node might want to delete all edges that are connected to them.
			obj.clean();
			this.__deleteObj(obj);
		}
		
	</method>
	<!--  this is a private function. It gets called via deleteselected -->
	<method name="__deleteObj" args="obj">
		obj.destroy();
	</method>
	<method name="addNode">
			//create an attributes dictionary
			var attr = {x:100, y:100};
				switch (nodeShapes) {
			case 'box':
				var nc = new box(this, attr);
				break;
			case 'fancybox':
				var nc = new fancybox(this, attr);
				break;
			default:
				var nc= new circle(this, attr);
				break;
		}
			//send notification that a node was added. Note that we're sending the model part of the node along with the event
			this.nodeAdded.sendEvent(nc.modelnode);
	</method>
	<handler name="onmouseover">
		LzCursor.showHandCursor(false);
	</handler>
	<handler name="onmouseout">
		LzCursor.showHandCursor(true);
	</handler>
</class>
</library>