<library>
	<class name="graph" extends="node">
		<handler name="oninit">
			this.nodes = new Array();
			this.edges = new Array();
		</handler>
		<method name="getJSAttrs">
		<![CDATA[
			var nodeArr = Array();
			for (var i=0; i < nodes.length; i++)
			{
				nodeArr.push(nodes[i].getJSAttrs());
			}
			
			var edgeArr = Array();
			for (var i=0; i < edges.length; i++)
			{
				edgeArr.push(edges[i].getJSAttrs());
			}	
			
			var ret = {nodes: nodeArr, edges: edgeArr};		
			return ret;
			//return nodeArr;
		]]>
		</method>
		<method name="upload" args="ds">
			var qs = JSON.stringify(getJSAttrs());
			ds.setQueryString({graph: qs});
			ds.doRequest();
			Debug.write(qs);
		</method>
		<method name="getNodesList">
		/*
		 * This method returns a list o
		 */
		</method>
		
		<method name="getNode" args="uid">
			//returns a node given a UID
			return this.nodes[uid];
		</method>
		
		<!--  this method returns the number of edges with the same source and target -->
		<method name="getSimilarEdgeCount" args="edge">
		<![CDATA[
			var count = 0;
			for (var i=0; i < edges.length; i++)
			{
				var iedge = edges[i];
				if ((iedge != null) && (iedge.s == edge.s) && (iedge.t == edge.t)) {
					count++;
				}
			}
			return count;
		]]>
		</method>
		<!-- returns similar edges including the edge passed itself -->
		<method name="getSimilarEdges" args="edge">
		<![CDATA[
			var simEdgeArr = new Array();
			for (var i=0; i < edges.length; i++)
			{
				var iedge = edges[i];
				if ((iedge != null) && (iedge.s == edge.s) && (iedge.t == edge.t)) {
					simEdgeArr.push(iedge);
				}
			}
			return simEdgeArr;
		]]>	
		</method>
	</class>
</library>