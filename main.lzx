<canvas width="100%" height="900" oninit="projectChooser.open()">
    <include href="model" />
    <include href="view" />
	<include href="resources" />
	<include href="resources/buttons" />
	
	<script src="JS/json.js" />
	
<kmenubar name="mb"/>
 <!--  This is the PHP script of servlet that would receive
 		model data from Kagome.
  -->
  <dataset name="kServer" src="http://localhost/KagomePHP/" request="false" method="post"/>



<leftpane name="leftp" height="100%" width="300" y="${topp.height-10}">
<NodePropertiesPane id="ppane"  visible="false" x="$once{parent.p.width}">
</NodePropertiesPane>

<EdgePropertiesPane id="edgePane" visible="false" x="$once{parent.p.width}">
	<handler name="nodeAdded" reference="dview" args="modelnode">
		this.updateTargetNodesList();
	</handler>
	<handler name="nodeDeleted" reference="dview" args="modelnode">
		this.updateTargetNodesList();
	</handler>
</EdgePropertiesPane>
</leftpane>
<toppane name="topp" width="100%"/>
<devview name="dview" width="100%" height="100%" y="$once{topp.height}" x="${leftp.width}">
	<text><b><i>Development Area</i></b></text>
</devview>


	<!--  this observer listens to what is happening in the development view and updates the model -->
	<graph name="model">
		<handler name="oninit">
			//create an initial node
			var initialNode = dview.addNode();
			//highlight it
			dview.setAttribute('selectedobj', initialNode);
		</handler>
		<handler name="onselectedobj" reference="dview">
			var ref = dview;
			Debug.write("current selected node", ref.selectedobj);
			if (ref.selectedobj.from != null) {
				ppane.setVisible(false);
				edgePane.setVisible(true);
				//edgePane.setX(ref.selectedobj.x + 50);
				//edgePane.setY(ref.selectedobj.y + 50);
				edgePane.setEdgeProperties(ref.selectedobj.modeledge);
			}
			else {
				edgePane.setVisible(false);
				ppane.setVisible(true);
				//ppane.setX(ref.selectedobj.x + 70);
				//ppane.setY(ref.selectedobj.y + 70);
				ppane.setStuff(ref.selectedobj.modelnode);
			}
		</handler>
		<handler name="ondeselectedobj" reference="dview">
			var ref = dview;
			Debug.write("Does is get here", ref.selectedobj);
			ref.parent.ppane.setVisible(false);
			ref.parent.edgePane.setVisible(false);
		</handler>	
		<handler name="nodeAdded" reference="dview" args="modelnode">
			//this is to make sure every node has a unique ID	
			var nodeID = this.nodes.push(modelnode);
			//use setAttribute so that an onuid event gets fired
			modelnode.setAttribute('uid',nodeID);
			modelnode.setAttribute('x', modelnode.uid * 50);
			Debug.write("modelnode.uid", modelnode.uid);
		</handler>
		<handler name="edgeAdded" reference="dview" args="modeledge">
			var edgeID = this.edges.push(modeledge);
			modeledge.setAttribute('uid', edgeID);
		</handler>
		<handler name="nodeDeleted" reference="dview" args="modelnode">
			/*
			 * Deleting nodes from the model causes 'null' filled spots in the array.
			 * Thats cool for now.
			 */
			var id = modelnode.uid;
			//-1 because id= length, which is less than array index by 1
			this.nodes[id-1] = null;
		</handler>
		<handler name="edgeDeleted" reference="dview" args="modeledge">
			var id = modeledge.uid;
			this.edges[id-1] = null
		</handler>				
	</graph>


<projectchooser name="projectChooser" />
<templatechooser name="templateChooser" />

<window name="preview" x="300" y="200" width="815" height="550" visible="false" closeable="true" onclick="preview.setVisible(false)">
	<view align="center" resource="ATMpreview" />
</window>


</canvas>