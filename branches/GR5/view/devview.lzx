<library>
	<class name="devview">
	
	<NodePropManipulation name="nManipulation" visible="false">
	</NodePropManipulation>
	
	<!--  this attribute gets set to the currently selected object (node or edge). -->
	<attribute name="selectedobj" />
	<!--  this attribute sets the shape of the nodes that will be drawn.
		For now, it can be:
		1. circle
		2. box
		3. fancy box
	 -->
	<attribute name="nodeShapes" type="string" value="roundrectnode"/>
	<!-- this flag denotes the current mode
		the mode can be: ADD_CONNECTOR
		
	 -->
	 <attribute name="modeFlag" type="string"/>
	 
	 <attribute name="coord" type="number" value="100" />
	 
	 <!-- 
	 	Attributes that track the mouse. These will be used to constrain the mouse follower view to within the bounds of dview
	  -->
	 <attribute name="mousex" type="number" value="${getMouse('x')}" />
	 <attribute name="mousey" type="number" value="${getMouse('y')}" />
	<event name="onselectswitch" />
	<!-- Nodes fire this event in the view when they are clicked. 
	This will be used to create new connectors. To create a new conenctor, 
	a user clicks one node, and then clicks another one
	
	THIS IS JUST A FIRST STAB. WE MIGHT WANT TO DO SOMETHING ELSE TO DRAW EDGES.
	 -->
	<event name="onnodeclicked" />

	<event name="ondeselectedobj" />
	
	<event name="nodeAdded" />
	<event name="edgeAdded" />
	<event name="nodeDeleted" />
	<event name="edgeDeleted" />		

	
	<handler name="onselectswitch">
		if (this.selectedobj)
			this.selectedobj.unhighlight();
	</handler>
	<handler name="onselectedobj">
		this.selectedobj.highlight();
	</handler>
	<!-- 
		This is a view that always follows the mouse. It has zero width and height so that it doesn't interfere with mouse clicks .. etc.
		I made this declarati
	 -->
	<view name="mfollower" width="0" height="0" bgcolor="0xabcabc">
		<handler name="onmousex" reference="parent">
			//The +10 offset is so that the newly created edge does not intercept mouse clicks
			if (parent.mousex >= 0) {
				setX(parent.mousex + 10);
				}
		</handler>
		<handler name="onmousey" reference="parent">
			if (parent.mousey >= 0) {
				setY(parent.mousey + 10);
				}		
		</handler>		
	</view>
		
	<handler name="onnodeclicked" args="clickednode">
	<![CDATA[
		//are we in the correct mode?
		if (this.modeFlag == "ADD_CONNECTOR")
		{
			//if there was a previously clicked node. Also make sure that user cannot create self edges (where the same node is source and target).
			if ((this.pclickednode != null) && (this.pclickednode != clickednode)) {
					//make a connector
					var ncon = new connector(this, {from:this.pclickednode,to:clickednode});
					//remove mode
					this.setAttribute('modeFlag', '');
					this.edgeAdded.sendEvent(ncon.modeledge);
				}
			else {//make this the first clicked node
				this.pclickednode = clickednode;
				this.followingCon = new connector(this, {from:this.pclickednode,to:this.mfollower});			
			}
		}
	]]>	
	</handler>
	<handler name="onmodeFlag">
		Debug.write("current mode is", this.modeFlag);
		switch (modeFlag) {
			case "ADD_CONNECTOR":
				LzCursor.setCursorGlobal('concursor');
				break;
			
			default:
				//is there an edge that is following the cursor?
				if (this.followingCon != null) {
					this.followingCon.destroy();
					Debug.write("follower destroyed");
				}
				LzCursor.restoreCursor();
				break;
		}
	</handler>
	<handler name="onclick">
		//when we click on the development view somewhere outside an object
		//unhighlight the currently selected object, if any
		if (this.selectedobj != null) {
			// Send deselect event to parent
			this.ondeselectedobj.sendEvent();
			this.selectedobj.unhighlight();
		}
		//also release the modeflag
		this.setAttribute('modeFlag', 'NONE');
		Debug.write("dview clicked");
	</handler>
	<method name="deleteSelected">
		var obj = this.selectedobj;
		var type = "";
		if (obj != null) {
			if (obj.from != null) {
				//the object deleted is an edge. 
				//infor model
				this.edgeDeleted.sendEvent(obj.modeledge);
			}
			else {
				/*
				 *	node. inform model
				 */
				 this.nodeDeleted.sendEvent(obj.modelnode);
			}
			//call clean on the object. For an example, node might want to delete all edges that are connected to them.
			obj.clean();
			this.__deleteObj(obj);
		}
		
	</method>
	<!--  this is a private function. It gets called via deleteselected -->
	<method name="__deleteObj" args="obj">
		obj.destroy();
	</method>
	<method name="addNode">
			//create an attributes dictionary
			var attr = {x:this.coord, y:this.coord};
				switch (nodeShapes) {
			case 'box':
				var nc = new box(this, attr);
				break;
			case 'fancybox':
				var nc = new fancybox(this, attr);
				break;
			case 'roundrectnode':
				var nc = new roundrectnode(this, attr);
				break;				
			default:
				setAttribute(nodeShapes, 'circle');
				var nc= new circle(this, attr);
				break;
		}
			this.setAttribute('coord', this.coord+40);
			//send notification that a node was added. Note that we're sending the model part of the node along with the event
			this.nodeAdded.sendEvent(nc.modelnode);
			//return a reference to the just added node.
			return nc;
	</method>
	<handler name="onmouseover">
		LzCursor.showHandCursor(false);
	</handler>
	<handler name="onmouseout">
		LzCursor.showHandCursor(true);
	</handler>
</class>
</library>