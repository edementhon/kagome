<library>
	<class name="devview" extends="bigdraggable" focusable="true">

	<NodePropManipulation name="nManipulation" visible="false"/>
	<EdgePropManipulation name="eManipulation" visible="false"/>
	<EdgePropManipulationBG name="eManipulationBG" visible="false"/>

	<!--  this attribute gets set to the currently selected object (node or edge). -->
	<attribute name="selectedobj" />
	<!--  this attribute sets the shape of the nodes that will be drawn.
		For now, it can be:
		1. circle
		2. box
		3. fancy box
	 -->
	<attribute name="nodeShapes" type="string" value="roundrectnode"/>
	<!-- this flag denotes the current mode
		the mode can be: ADD_CONNECTOR
		
	 -->
	 <attribute name="modeFlag" type="string"/>
	 
	 <attribute name="coord" type="number" value="100" />
	 
	 <attribute name="xPercentage" type="number" />	 
	 <attribute name="yPercentage" type="number" />
	 
	 <attribute name = "zoomMag" type="number" value="${parent.topp.zoomMag}" />
	 
	 <attribute name = "origWidth" />
	 <attribute name = "origHeight" />
	 
	 
	 <!-- 
	 	Attributes that track the mouse. These will be used to constrain the mouse follower view to within the bounds of dview
	  -->
	 <attribute name="mousex" type="number" value="${getMouse('x')}" />
	 <attribute name="mousey" type="number" value="${getMouse('y')}" />
	<event name="onselectswitch" />
	<!-- Nodes fire this event in the view when they are clicked. 
	This will be used to create new connectors. To create a new conenctor, 
	a user clicks one node, and then clicks another one
	
	THIS IS JUST A FIRST STAB. WE MIGHT WANT TO DO SOMETHING ELSE TO DRAW EDGES.
	 -->
	<event name="onnodeclicked" />

	<event name="ondeselectedobj" />
	
	<event name="nodeAdded" />
	<event name="edgeAdded" />
	<event name="nodeDeleted" />
	<event name="edgeDeleted" />		

	<handler name="oninit">
		this.sendToBack();
		this.setAttribute('origWidth', this.width);
		this.setAttribute('origHeight', this.height);
		/*
		 * From now on, the devview will keep references to all created nodes and edges.
		 */
		this.nodes = new Array();
		this.edges = new Array();
	</handler>
	
	<handler name="onselectswitch">
		if (this.selectedobj)
			this.selectedobj.unhighlight();
	</handler>
	<handler name="onselectedobj">
		this.selectedobj.highlight();
	</handler>
	
	<handler name="onzoomMag">
		<!-- change width, height -->
		this.setAttribute('width', 5000/zoomMag);
		this.setAttribute('height', 3000/zoomMag);
		
		<!-- change x, y using the percentages-->
		//this.setAttribute('x', ((this.xPercentage*this.width)+parent.width/2));
		//this.setAttribute('y', ((this.yPercentage*this.height)+parent.height/2));
		
		this.setAttribute('x', this.xPercentage*this.width);
		this.setAttribute('y', this.yPercentage*this.height);
		
		if (this.x >= 0){
			this.setAttribute('x', 0);
		}
		if (this.y >= 0){
			this.setAttribute('y',0);
		}
		
		if ((parent.width-this.width) >= this.x){
			this.setAttribute('x', parent.width - this.width);
		}
		
		if ((parent.height-this.height) >= this.y){
			this.setAttribute('y', parent.height - this.height);
		}
		
		<!-- change the positions and sizes of each child -->
		
	</handler>
	
	
	<handler name="onx">
		//this.setAttribute("xPercentage" , (this.x - (parent.width/2))/this.width);
		this.setAttribute("xPercentage" , this.x/this.width);
	</handler>
	<handler name="ony">
		//this.setAttribute("yPercentage" , (this.y - (parent.height/2))/this.height);
		this.setAttribute("yPercentage" , this.y/this.height);
	</handler>
	<!-- 
		This is a view that always follows the mouse. It has zero width and height so that it doesn't interfere with mouse clicks .. etc.
		I made this declarati
	 -->
	<view name="mfollower" width="0" height="0" bgcolor="0xabcabc">
		<handler name="onmousex" reference="parent">
			//The +10 offset is so that the newly created edge does not intercept mouse clicks
			if (parent.mousex >= 0) {
				setX(parent.mousex + 10);
				}
		</handler>
		<handler name="onmousey" reference="parent">
			if (parent.mousey >= 0) {
				setY(parent.mousey + 10);
				}		
		</handler>		
	</view>
		
	<handler name="onnodeclicked" args="clickednode">
	<![CDATA[
		//are we in the correct mode?
		if (this.modeFlag == "ADD_CONNECTOR")
		{
			//if there was a previously clicked node. Also make sure that user cannot create self edges (where the same node is source and target).
			if ((this.pclickednode != null) && (this.pclickednode != clickednode)) {
					//make a connector
					var ncon = new connector(this, {from:this.pclickednode,to:clickednode});
					//insert the reference to the just created edge
					this.edges.push(ncon);
					
					//remove mode
					this.setAttribute('modeFlag', '');
					this.edgeAdded.sendEvent(ncon.modeledge);
				}
			else {//make this the first clicked node
				this.pclickednode = clickednode;
				this.followingCon = new connector(this, {from:this.pclickednode,to:this.mfollower});			
			}
		}
	]]>	
	</handler>
	<handler name="onmodeFlag">
		//Debug.write("current mode is", this.modeFlag);
		switch (modeFlag) {
			case "ADD_CONNECTOR":
				LzCursor.setCursorGlobal('concursor');
				break;
			
			default:
				//is there an edge that is following the cursor?
				if (this.followingCon != null) {
					this.followingCon.destroy();
					Debug.write("follower destroyed");
				}
				LzCursor.restoreCursor();
				break;
		}
	</handler>

	<handler name="onclick">
		//when we click on the development view somewhere outside an object
		//unhighlight the currently selected object, if any
		if (this.selectedobj != null) {
			// Send deselect event to parent
			this.ondeselectedobj.sendEvent();
			this.selectedobj.unhighlight();
			this.setAttribute('selectedobj', null);
		}
		//also release the modeflag
		this.setAttribute('modeFlag', 'NONE');
		Debug.write("dview clicked");
	</handler>
	<method name="deleteSelected">
	<![CDATA[
		var obj = this.selectedobj;
		var type = "";
		if (obj != null) {
			if (obj.from != null) {
				//the object deleted is an edge. 
				//infor model
				deleteEdge(obj);
			}
			else {
				/*
				 *	node. inform model
				 */
				deleteKnode(obj);
			}
			//call clean on the object. For an example, node might want to delete all edges that are connected to them.
			obj.clean();
			this.__deleteObj(obj);
		}
		]]>	
	</method>
	<method name="deleteKnode" args="obj">
		<![CDATA[
				//loop through and delete all other edges.
				 for (var i=0; i < this.edges.length; i++) {
				 	if ((this.edges[i].from == obj) ||
				 	   (this.edges[i].to == obj))
				 	   deleteEdge(this.edges[i]);	
				 }
				 
				 for (var i=0; i < this.nodes.length; i++) {
				 	if (this.nodes[i] == obj) {
				 		this.nodes[i].destroy();
				 		this.nodes[i] = null;
				 		}
				 }
				 this.nodeDeleted.sendEvent(obj.modelnode);	
				 this.setAttribute('selectedobj', null);
				 
		]]>	
	</method>
	<method name="deleteEdge" args="obj">
		<![CDATA[
				this.edgeDeleted.sendEvent(obj.modeledge);
				for (var i=0; i < this.edges.length; i++) {
				 	if (this.edges[i] == obj) {
				 		this.edges[i].destroy();
				 		this.edges[i] = null;
				 		}
				 }	
		]]>
	</method>
	<!--  this is a private function. It gets called via deleteselected -->
	<method name="__deleteObj" args="obj">
		obj.destroy();
	</method>
	<method name="addNode">
			//create an attributes dictionary
			var offset = 0;
			//if this is the first node. We want the first node not get covered by the leftp
			if (this.nodes.length == 0) {
				offset = 200;
				}
			var attr = {x:this.coord+offset, y:this.coord};
				switch (nodeShapes) {
			case 'box':
				var nc = new box(this, attr);
				break;
			case 'fancybox':
				var nc = new fancybox(this, attr);
				break;
			case 'roundrectnode':
				var nc = new roundrectnode(this, attr);
				break;				
			default:
				setAttribute(nodeShapes, 'circle');
				var nc= new circle(this, attr);
				break;
		}
			//maintain a reference to the just created node
			this.nodes.push(nc);
			
			this.setAttribute('coord', this.coord+40);
			//send notification that a node was added. Note that we're sending the model part of the node along with the event
			this.nodeAdded.sendEvent(nc.modelnode);
			//return a reference to the just added node.
			return nc;
	</method>
	<method name="adjustSimilarConnectors" args="connector">
	<![CDATA[
		var simEdges = canvas.model.getSimilarEdges(connector.modeledge);
		//connector is the parent container(LZX node) of edge
		if (simEdges.length > 0) {
			var tSize = simEdges[0].parent.thint.width;
			var off = 2;
			for (var i=0; i < simEdges.length; i++) {
				if (i >0) {
					var tSize = simEdges[i-1].parent.thint.width;
				}
				var nOffset = (i-Math.floor(simEdges.length/2))*(tSize+off);
				simEdges[i].parent.animate('thintoffset',  nOffset, 700, true,{motion:'easeout', relative: false}); 
			}
		}
	]]>
	</method>
	
	<method name="zoomIn">
		if (canvas.topp.buttons.zoomslider.value > 0){
			canvas.topp.buttons.zoomslider.setAttribute('value', canvas.topp.buttons.zoomslider.value - 1);
		}
	</method>
	
	<method name= "zoomOut">
		if (3 > canvas.topp.buttons.zoomslider.value){
			canvas.topp.buttons.zoomslider.setAttribute('value', canvas.topp.buttons.zoomslider.value + 1);
		}
	</method>
	
	<handler name="onmouseover">
		LzCursor.showHandCursor(false);
	</handler>
	<handler name="onmouseout">
		LzCursor.showHandCursor(true);
	</handler>
	<handler name="onkeydown" args="k">
		var delKey = 46;
		var plusKey = 187;
		var minusKey = 189;
		if (k==delKey)
			deleteSelected();
		else if (k==plusKey)
			zoomIn();
		else if (k==minusKey)
			zoomOut();
			
	</handler>
</class>
</library>