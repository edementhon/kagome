<library>
	<class name="EdgePropManipulationBG" extends="roundrect" width="0" height="0"
					backgroundStartColor="$once{nodehi}"
					backgroundStopColor="$once{nodehi}"
					borderRadius="8"
					borderColor="$once{nodehib}"
					borderWidth="3"
					backgroundGradientOrientation="horizontal"
					>
      	<animator name="anm_height_in" attribute="height" to="460" from="0" duration="500" start="false"/>
	    <animator name="anm_width_in" attribute="width" to="330" from="0" duration="500" start="false"/>
       	<animator name="anm_width_out" attribute="height" to="0" duration="500" start="false"/>
		<animator name="anm_height_out" attribute="width" to="0" duration="500" start="false"/>

		<handler name="onwidth">
			<![CDATA[
			drawStructure();
			if (width == 330) {
				canvas.dview.eManipulation.bringToFront();
				canvas.dview.eManipulation.setVisible(true);
			}
			if (width > 1) {
				this.setVisible(true);
			}
			if (width < 1) {
				this.setVisible(false);
			}]]>
		</handler>
		<handler name="onheight">
			drawStructure();
		</handler>	

		<method name="animateIn">
			this.setAttribute("backgroundStartColor", nodehi);
			this.setAttribute("backgroundStopColor", nodehi);
			this.setAttribute("borderColor", nodehib);
			drawStructure();
			
			this.bringToFront();
			this.setVisible(true);
			anm_height_in.doStart();
			anm_width_in.doStart();
		</method>
		
		<method name="animateOut">
			this.setAttribute("backgroundStartColor", nodeblue);
			this.setAttribute("backgroundStopColor", nodeblue);
			this.setAttribute("borderColor", nodedarkblue);
			drawStructure();
			
			canvas.dview.eManipulation.setVisible(false);
			anm_height_out.doStart();
			anm_width_out.doStart();
		</method>
	</class>

	<class name="EdgePropManipulation" extends="proppane" width="330" height="460" paneTitle="Edge Properties" clip="true">
		<method name="setEdgeProperties" args="propedge">
			inside.preview.setAttribute('modelnode', propedge.s);
			inside.buttonSelect.empty();
			inside.buttonSelect.addItem("?", null);
    		inside.buttonSelect.addItem("1 " + propedge.s.b1text, 1);
    		inside.buttonSelect.addItem("2 " + propedge.s.b2text, 2);
    		inside.buttonSelect.addItem("3 " + propedge.s.b3text, 3);
    		inside.buttonSelect.addItem("4 " + propedge.s.b4text, 4);
    		if (propedge.sourceButton != null) {
    			inside.buttonSelect.selectItem(propedge.sourceButton);
    		}
    		else {
    			inside.buttonSelect.select(inside.buttonSelect.getItemAt(0));
    		}
    		inside.targetcb.selectItem(propedge.t);		
		</method>

		<method name="applyStuff">
		canvas.dview.selectedobj.modeledge.setAttribute('sourceButton', inside.buttonSelect.getValue());
		canvas.dview.selectedobj.changeTarget(inside.targetcb.getValue().parent);
		</method>
		<method name="updateTargetNodesList">
			this.inside.targetcb.update();
		</method>
		<handler name="onvisible">
			/*
			 * The target nodes list gets updated everytime the visibility of the pane is toggled. Also anytime a new node is added to devview.
			 *
			 */
			updateTargetNodesList();
		</handler>

		<handler name="onstate" reference="canvas.leftp">
			if (canvas.leftp.state == "CLOSED") {
				if (parent.selectedobj.from != null) {
				this.setEdgeProperties(parent.selectedobj.modeledge);
				}
			}
		</handler>

		<view width="330" height="390" name="inside">
			<simplelayout axis="y" spacing="5"/>

  			<text>Source Screen Preview</text>
			 <atmminipreview_manipulation_edge width="300" height="180" name="preview" align="center" resource="minipreview" stretches="both" />

    		<text>Event: </text>

    		<radiogroup name="group1">
    		<radiobutton value="1" text="Button press"  selected="true"/>
  			</radiogroup>
    		
    		<text> Source Button: </text>
    		<!--edittext width = "150" name = "buttonSelect" /-->
    		<combobox name="buttonSelect" width="200">
    			<handler name="oninit">
				//moved them to setEdgeProperties
    			</handler>
    			<method name="empty">
    				removeItemAt(4);
    				removeItemAt(3);
    				removeItemAt(2);
    				removeItemAt(1);
    				removeItemAt(0);
    			</method>
    			<handler name="onvalue">
    				parent.preview.setButton(this.value);
    			</handler>
    		</combobox>

    		<text> Target Screen: </text>
    		<combobox name="targetcb" width="200">
    			<attribute name="counter" type="number" value="0"/>
    			<method name="fill">
	    			<![CDATA[
	    				for (var i=0; i< canvas.model.nodes.length; i++) {
	    					var n = canvas.model.nodes[i];
	    					if ((n!=null) && (n != parent.preview.modelnode)) {
		    					this.addItem(n.title, n);
		    					this.counter++;
		    					//Debug.write(parent.preview.modelnode.uid);
	    					}
	    				}
	    			]]>	
    			</method>
    			<method name="empty">
	    			<![CDATA[
	    				for (var i=this.counter-1; i>= 0; i--) {
							removeItemAt(i);
	    				}
	    			]]>	
    			</method>
    			<method name="update">
    			    empty();
    				fill();
    			</method>
    		</combobox>
  		</view> 

	</class>
</library>