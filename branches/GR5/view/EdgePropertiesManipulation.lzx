<library>
	<class name="EdgePropManipulationBG" extends="roundrect" width="0" height="0"
					backgroundStartColor="$once{nodehi}"
					backgroundStopColor="$once{nodehi}"
					borderRadius="8"
					borderColor="$once{nodehib}"
					borderWidth="3"
					backgroundGradientOrientation="horizontal"
					>
      	<animator name="anm_height_in" attribute="height" to="300" from="0" duration="500" start="false"/>
	    <animator name="anm_width_in" attribute="width" to="330" from="0" duration="500" start="false"/>
       	<animator name="anm_width_out" attribute="height" to="0" duration="500" start="false"/>
		<animator name="anm_height_out" attribute="width" to="0" duration="500" start="false"/>

		<handler name="onwidth">
			<![CDATA[
			drawStructure();
			if (width == 330) {
				canvas.dview.eManipulation.bringToFront();
				canvas.dview.eManipulation.setVisible(true);
			}
			if (width > 1) {
				this.setVisible(true);
			}
			if (width < 1) {
				this.setVisible(false);
			}]]>
		</handler>
		<handler name="onheight">
			drawStructure();
		</handler>
		
		<method name="animateIn">
			this.setAttribute("backgroundStartColor", nodehi);
			this.setAttribute("backgroundStopColor", nodehi);
			this.setAttribute("borderColor", nodehib);
			drawStructure();
			
			this.bringToFront();
			this.setVisible(true);
			anm_height_in.doStart();
			anm_width_in.doStart();
		</method>
		
		<method name="animateOut">
			this.setAttribute("backgroundStartColor", nodeblue);
			this.setAttribute("backgroundStopColor", nodeblue);
			this.setAttribute("borderColor", nodedarkblue);
			drawStructure();
			
			canvas.dview.eManipulation.setVisible(false);
			anm_height_out.doStart();
			anm_width_out.doStart();
		</method>
	</class>

	<class name="EdgePropManipulation" extends="proppane" width="330" height="300" paneTitle="Edge Properties" clip="true">
		<method name="setEdgeProperties" args="propedge">
			inside.preview.setAttribute('modelnode', propedge.s);

    		if (propedge.sourceButton != null) {
    			inside.preview.sourceButton.selectItem(propedge.sourceButton);
    		}
    		else {
    			inside.preview.sourceButton.clearSelection();
    		}	
		</method>

		<method name="applyStuff">
			canvas.dview.selectedobj.modeledge.setAttribute('sourceButton', inside.preview.sourceButton.getValue());
			//canvas.dview.selectedobj.changeTarget(inside.targetcb.getValue().parent);
		</method>
		<method name="updateTargetNodesList">
			this.inside.targetcb.update();
		</method>
		<handler name="onvisible">
			/*
			 * The target nodes list gets updated everytime the visibility of the pane is toggled. Also anytime a new node is added to devview.
			 *
			 */
			updateTargetNodesList();
		</handler>

		<handler name="onstate" reference="canvas.leftp">
			if (canvas.leftp.state == "CLOSED") {
				if (parent.selectedobj.from != null) {
				this.setEdgeProperties(parent.selectedobj.modeledge);
				}
			}
		</handler>

		<view width="330" height="230" name="inside">
			<simplelayout axis="y" spacing="5"/>

  			<text>Source Screen Preview</text>
			 <atmminipreview_manipulation_edge width="305" height="180" name="preview" resource="minipreview" stretches="both" />

  		</view> 

	</class>
</library>